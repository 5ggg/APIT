% APIT Lab Week5a
% Description of solution

This is quite a tricky lab. The main idea is that the chef and the diner communicate via a shared buffer (the waiter). I.e. the chef can give dishes to the waiter when the waiter isn't currently holding a dish and the diner can take dishes from the waiter when they're ready.

All of the logic/locks/magic is going to be in the Waiter class.

The Chef class is very simple:

~~~~{.java}
/ The chef class...it passes dishes to the waiter
public class Chef extends Thread {
	private Waiter waiter;
	private String[] dishes = {"Starter","Main","Pudding","Coffee","Wafer thin mint"};
	public Chef(Waiter waiter) {
		this.waiter = waiter;
	}
	public void run() {
		for(String d: dishes) {
		try {
				Thread.sleep(3000); // time taken to prepare a course
			}catch(InterruptedException e) {
				e.printStackTrace();
			}
			waiter.giveDish(d);
		}
	}
}
~~~~

It has a series of 5 dishes that can be prepared. It extends thread as it will run independently. On starting, it waits for three seconds (to simulate  making the starter) and then tries to give the first dish (starter) to the waiter. Once it has managed this, it waits a further 3 seconds and tries to give the second dish to the waiter.

The diner is also pretty simple:

~~~~{.java}
ublic class Diner extends Thread {
	private Waiter waiter;
	private boolean hasDish = false;
	private String dish;
	public Diner(Waiter waiter) {
		this.waiter = waiter;
	}
	public void run() {
		while(true) {
			this.dish = waiter.takeDish();
			System.out.println("Diner is consuming " + this.dish);
			try{
				Thread.sleep(5000); // time to eat it
			}catch(InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}
~~~~

It also extends Thread (as it will run independently) and, on starting, it attempts to take a dish from the waiter, once it has managed this it says it is consuming it and then sleeps for 5 seconds (the time it takes for this diner to eat). When the 5 seconds has elapsed it tries to take another dish, etc.

